# baseURI: http://sv.cmu.edu/AWP/8.0/ss2owl.1
# imports: http://sv.cmu.edu/AWP/8.0/ActorRoles
# imports: http://sv.cmu.edu/AWP/8.0/props

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix ar: <http://sv.cmu.edu/AWP/8.0/ActorRoles#> .
@prefix data: <http://sv.cmu.edu/2014-05-20-Data#> .
@prefix entity: <http://sv.cmu.edu/AWP/8.0/entity#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix props: <http://sv.cmu.edu/AWP/8.0/props#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spinmapl: <http://topbraid.org/spin/spinmapl#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix ss2owl: <http://sv.cmu.edu/ss2owl.3#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

props:Combined-Elements-noduprows
  rdf:type owl:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "obj"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "pred"^^xsd:string ;
              ] ;
            sp:subject [
                sp:varName "newURI"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "name"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject [
                sp:varName "newURI"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "name"^^xsd:string ;
              ] ;
            sp:predicate props:entityName ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:camelCase ;
                sp:arg1 [
                    sp:varName "name"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "camelName"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:replaceAll ;
                sp:arg1 [
                    sp:varName "camelName"^^xsd:string ;
                  ] ;
                sp:arg2 "[:/&()]" ;
                sp:arg3 "-" ;
              ] ;
            sp:variable [
                sp:varName "cleanName"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "number"^^xsd:string ;
              ] ;
            sp:predicate <http://topbraid.org/tables#rowIndex> ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type fn:concat ;
                sp:arg1 [
                    sp:varName "cleanName"^^xsd:string ;
                  ] ;
                sp:arg2 "-" ;
                sp:arg3 [
                    sp:varName "number"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "newName"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type smf:buildURI ;
                sp:arg1 "entity:{?1}" ;
                sp:arg2 [
                    sp:varName "newName"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "newURI"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "obj"^^xsd:string ;
              ] ;
            sp:predicate [
                sp:varName "pred"^^xsd:string ;
              ] ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "041 Rename the URIs"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:ConceptualEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:ConceptualService ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:ConceptualEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "020 Create ConceptualService"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:ConceptualEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceComposition ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:ConceptualServiceComposition ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:ConceptualEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceComposition ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "021 Create ConceptualServiceComposition"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:ConceptualEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:ConceptualServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:ConceptualEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "022 Create ConceptualServiceContract"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:ImplementationEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:ImplementationService ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:ImplementationEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "028 Create ImplementationService"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Actor ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:LogicalActor ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Actor ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "029 Create LogicalActor"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:LogicalService ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "023 Create LogicalService"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceComposition ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:LogicalServiceComposition ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceComposition ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "024 Create LogicalServiceComposition"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:ConceptualServiceComposition ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "025 Create LogicalServiceContract"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:PhysicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Actor ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:PhysicalActor ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:PhysicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Actor ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "030 Create PhysicalActor"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:PhysicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:PhysicalService ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:PhysicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "026 Create PhysicalService"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object ar:PhysicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object ar:PhysicalServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object ar:PhysicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object ar:ServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "027 Create PhysicalServiceContract"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object props:Combined-Elements-noduprows ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:TriplePath ;
            sp:object ar:Entity ;
            sp:path [
                rdf:type sp:SeqPath ;
                sp:path1 rdf:type ;
                sp:path2 [
                    rdf:type sp:ModPath ;
                    sp:modMax -2 ;
                    sp:modMin 1 ;
                    sp:subPath rdfs:subClassOf ;
                  ] ;
              ] ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "042 Remove the original type assignment for the newly defined entities"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:deletePattern (
          [
            sp:object [
                sp:varName "object"^^xsd:string ;
              ] ;
            sp:predicate props:entityName ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:insertPattern (
          [
            sp:object [
                sp:varName "string"^^xsd:string ;
              ] ;
            sp:predicate props:entityName ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "object"^^xsd:string ;
              ] ;
            sp:predicate props:entityName ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:strdt ;
                sp:arg1 [
                    rdf:type sp:str ;
                    sp:arg1 [
                        sp:varName "object"^^xsd:string ;
                      ] ;
                  ] ;
                sp:arg2 xsd:string ;
              ] ;
            sp:variable [
                sp:varName "string"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "040 Set the datatype of the entityName field data to string (it was erroneously recognized as double)"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            sp:object ar:Actor ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate props:actorServiceCompositionService ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:lowerCase ;
                sp:arg1 [
                    sp:varName "entity"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "entityLowerCase"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type fn:contains ;
                sp:arg1 [
                    sp:varName "entityLowerCase"^^xsd:string ;
                  ] ;
                sp:arg2 "actor" ;
              ] ;
          ]
        ) ;
      rdfs:comment "005: Declare all Actors"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            sp:object ar:ConceptualEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "hierarchy"^^xsd:string ;
              ] ;
            sp:predicate props:hierarchyConceptualLogicalPhysical ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:lowerCase ;
                sp:arg1 [
                    sp:varName "hierarchy"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hierarchyLowerCase"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type fn:contains ;
                sp:arg1 [
                    sp:varName "hierarchyLowerCase"^^xsd:string ;
                  ] ;
                sp:arg2 "conceptual" ;
              ] ;
          ]
        ) ;
      rdfs:comment "001: Declare all conceptual entities"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            sp:object ar:ImplementationEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "hierarchy"^^xsd:string ;
              ] ;
            sp:predicate props:hierarchyConceptualLogicalPhysical ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:lowerCase ;
                sp:arg1 [
                    sp:varName "hierarchy"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hierarchyLowerCase"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type fn:contains ;
                sp:arg1 [
                    sp:varName "hierarchyLowerCase"^^xsd:string ;
                  ] ;
                sp:arg2 "implementation" ;
              ] ;
          ]
        ) ;
      rdfs:comment "004: Declare all implementation entities"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            sp:object ar:LogicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "hierarchy"^^xsd:string ;
              ] ;
            sp:predicate props:hierarchyConceptualLogicalPhysical ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:lowerCase ;
                sp:arg1 [
                    sp:varName "hierarchy"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hierarchyLowerCase"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type fn:contains ;
                sp:arg1 [
                    sp:varName "hierarchyLowerCase"^^xsd:string ;
                  ] ;
                sp:arg2 "logical" ;
              ] ;
          ]
        ) ;
      rdfs:comment "002: Declare all logical entities"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            sp:object ar:PhysicalEntity ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "hierarchy"^^xsd:string ;
              ] ;
            sp:predicate props:hierarchyConceptualLogicalPhysical ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:lowerCase ;
                sp:arg1 [
                    sp:varName "hierarchy"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "hierarchyLowerCase"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type fn:contains ;
                sp:arg1 [
                    sp:varName "hierarchyLowerCase"^^xsd:string ;
                  ] ;
                sp:arg2 "physical" ;
              ] ;
          ]
        ) ;
      rdfs:comment "003: Declare all physical entities"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            sp:object ar:Service ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate props:actorServiceCompositionService ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:lowerCase ;
                sp:arg1 [
                    sp:varName "entity"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "entityLowerCase"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type fn:ends-with ;
                sp:arg1 [
                    sp:varName "entityLowerCase"^^xsd:string ;
                  ] ;
                sp:arg2 "service" ;
              ] ;
          ]
        ) ;
      rdfs:comment "006: Declare all Services"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            sp:object ar:ServiceComposition ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate props:actorServiceCompositionService ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:lowerCase ;
                sp:arg1 [
                    sp:varName "entity"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "entityLowerCase"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type fn:ends-with ;
                sp:arg1 [
                    sp:varName "entityLowerCase"^^xsd:string ;
                  ] ;
                sp:arg2 "composition" ;
              ] ;
          ]
        ) ;
      rdfs:comment "008: Declare all ServiceCompositions"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Modify ;
      sp:insertPattern (
          [
            sp:object ar:ServiceContract ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "entity"^^xsd:string ;
              ] ;
            sp:predicate props:actorServiceCompositionService ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:lowerCase ;
                sp:arg1 [
                    sp:varName "entity"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "entityLowerCase"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type fn:ends-with ;
                sp:arg1 [
                    sp:varName "entityLowerCase"^^xsd:string ;
                  ] ;
                sp:arg2 "contract" ;
              ] ;
          ]
        ) ;
      rdfs:comment "007: Declare all ServiceContracts"^^xsd:string ;
    ] ;
  rdfs:label "Combined-Elements-noduprows" ;
.
<http://sv.cmu.edu/AWP/8.0/ss2owl.1>
  rdf:type owl:Ontology ;
  owl:imports <http://sv.cmu.edu/AWP/8.0/ActorRoles> ;
  owl:imports <http://sv.cmu.edu/AWP/8.0/props> ;
  owl:versionInfo "Created with TopBraid Composer"^^xsd:string ;
.
